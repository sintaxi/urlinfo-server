#!/usr/bin/env node

var urlinfo  = require("../")
var minimist = require("minimist")
var argv     = minimist(process.argv.slice(2))
var cfg      = require("../package.json")


/***
 *
 * urlinfo version
 *
 */

if (argv.version || argv.v || argv["_"][0] === "version") {
  console.log(cfg.version)
  process.exit()
}


/***
 *
 * urlinfo help
 *
 */

if (argv.help || argv.h || argv["_"].length == 0) {
  console.log()
  console.log("  urlinfo - " + cfg.version)
  console.log("  Service for storing and fetching url information.")
  console.log()
  console.log("  Commands:")
  console.log("    urlinfo server <file>               http server (stores records in database)")
  console.log("    urlinfo proxy <domain>              http server (proxies records to other urlinfo API)")
  console.log("    urlinfo benchmark <domain>          benchmarks the urlinfo server that is passed in")
  console.log()
  console.log("  Options:")
  console.log("    -p, --port (9001)                   specify port for server")
  console.log("    -h, --help                          outputs this help message")
  console.log("    -v, --version                       outputs version")
  console.log()
  console.log("  Examples:")
  console.log("    urlinfo server store.db             starts server on port 9001. saves state in store.db")
  console.log("    urlinfo proxy example.com -p 9002   starts server on port 9002. proxies req. to example.com")
  console.log()
  console.log("  Benchmarking Example:")
  console.log("    urlinfo benchmark example.com --records 50 --requests 5000")
  console.log()
  process.exit()
}


/***
 *
 * urlinfo server path/to/file.db
 *
 */

if (argv["_"].length > 0 && argv["_"][0] === "server") {
  if (argv["_"][1]){
    var port = argv.port || argv.p || 9000
    urlinfo.createClient({ disk: argv["_"][1] }).server.listen(port, function(){
      console.log("urlinfo -", cfg.version)
      console.log("Records being stored on disk at:", argv["_"][1])
      console.log("Server listening on port", port, "...")
    })
  } else {
    var port = argv.port || argv.p || 9000
    urlinfo.createClient({}).server.listen(port, function(){
      console.log("urlinfo -", cfg.version)
      console.log("Records being stored in memory.")
      console.log("Server listening on port", port, "...")
    })
  }
}


/***
 *
 * urlinfo proxy localhost:9000
 *
 */

if (argv["_"].length > 0 && argv["_"][0] === "proxy") {
  if (argv["_"][1]){
    var port = argv.port || argv.p || 9000
    urlinfo.createClient({ proxy: argv["_"][1] }).server.listen(port, function(){
      console.log("urlinfo -", cfg.version)
      console.log("Proxing all calls to:", argv["_"][1])
      console.log("Server listening on port", port, "...")
    })
  } else {
    console.log("Domain to API required.")
    console.log("Example: `urlinfo proxy https://example.com`")
    process.exit()
  }
}


/***
 *
 * urlinfo benchmark localhost:9000
 *
 */

if (argv["_"].length > 0 && argv["_"][0] === "benchmark") {
  if (argv["_"][1]){
    var testRecords  = argv.records  || 10
    var testRequests = argv.requests || 1000


    var benchcount = 50
    var setcount = 0

    console.log("Benchmarking", argv["_"][1])

    var client = urlinfo.createClient({ proxy: argv["_"][1] })

    var bench = function(urls){
      var reqs  = 50000
      var count = 0
      var total = testRecords * testRequests
      var readFns = []
      
      for (y = 1; y <= testRecords; y++)(function(y){
        for (x = 1; x <= testRequests; x++)(function(x){
          readFns.push(function(next){
            client.get("/" + y, function(record){
              next(null, record)
            })
          })
        })(x)
      })(y)

      console.log("Benchmarking all", testRecords, "urls", testRequests, "times each...")
      var index = 0;
      var start = new Date()
      function n(){
        var read = readFns[index++]
        if(!read) {
          var end = new Date() - start
          console.log("Done! Performed", testRecords * testRequests, "lookups in", end + "ms")
        } else {
          read.call(null, n)  
        }
      }
      n()

    }

    
    var writeFns = []
    for (i = 1; i <= testRecords; i++)(function(i){
      writeFns.push(function(next){
        var url = "/" + i
        var value = { abuse: (i % 2 === 0) }
        client.set(url, value, function(){
          next()
        })
      })
    })(i)

    console.log("Creating", testRecords, "records...")
    var s = new Date()
    var index = 0;
    function next(){
      var layer = writeFns[index++]
      if(!layer) {
        var e = new Date() - s
        console.log("Done! Performed", testRecords, "writes in", e + "ms")
        bench()
      }else {
        layer.call(this, next)
      }
    }
    next()


  } else {
    console.log("Domain to benchmark required")
    console.log("Example: `urlinfo benchmark localhost:9000 --records 50 --requests 10000`")
    process.exit()
  }
}
