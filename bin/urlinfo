#!/usr/bin/env node

var urlinfo  = require("../")
var minimist = require("minimist")
var argv     = minimist(process.argv.slice(2))
var cfg      = require("../package.json")


/***
 *
 * urlinfo version
 *
 */

if (argv.version || argv.v || argv["_"][0] === "version") {
  console.log(cfg.version)
  process.exit()
}


/***
 *
 * urlinfo help
 *
 */

if (argv.help || argv.h || argv["_"].length == 0) {
  console.log()
  console.log("  urlinfo - " + cfg.version)
  console.log("  Service for storing and fetching url information.")
  console.log()
  console.log("  Commands:")
  console.log("    urlinfo server <file>               http server (stores records in database)")
  console.log("    urlinfo proxy <domain>              http server (proxies records to other urlinfo API)")
  console.log()
  console.log("  Options:")
  console.log("    -p, --port (9001)                   specify port for server")
  console.log("    -h, --help                          outputs this help message")
  console.log("    -v, --version                       outputs version")
  console.log()
  console.log("  Examples:")
  console.log("    urlinfo server store.db             starts server on port 9001. saves state in store.db")
  console.log("    urlinfo proxy example.com -p 9002   starts server on port 9002. proxies req. to example.com")
  console.log()
  process.exit()
}


/***
 *
 * urlinfo server path/to/file.db
 *
 */

if (argv["_"].length > 0 && argv["_"][0] === "server") {
  if (argv["_"][1]){
    var port = argv.port || argv.p || 9000
    urlinfo.createClient({ disk: argv["_"][1] }).server.listen(port, function(){
      console.log("urlinfo -", cfg.version)
      console.log("Records being stored on disk at:", argv["_"][1])
      console.log("Server listening on port", port, "...")
    })
  } else {
    var port = argv.port || argv.p || 9000
    urlinfo.createClient({}).server.listen(port, function(){
      console.log("urlinfo -", cfg.version)
      console.log("Records being stored in memory.")
      console.log("Server listening on port", port, "...")
    })
  }
}


/***
 *
 * urlinfo proxy localhost:9000
 *
 */

if (argv["_"].length > 0 && argv["_"][0] === "proxy") {
  if (argv["_"][1]){
    var port = argv.port || argv.p || 9000
    urlinfo.createClient({ proxy: argv["_"][1] }).server.listen(port, function(){
      console.log("urlinfo -", cfg.version)
      console.log("Proxing all calls to:", argv["_"][1])
      console.log("Server listening on port", port, "...")
    })
  } else {
    console.log("Domain to API required.")
    console.log("Example: `urlinfo proxy https://example.com`")
    process.exit()
  }
}


/***
 *
 * urlinfo benchmark localhost:9000
 *
 */

if (argv["_"].length > 0 && argv["_"][0] === "benchmark") {
  if (argv["_"][1]){

    var benchcount = 100
    var setcount = 0

    console.log("Benchmarking", argv["_"][1])

    var client = urlinfo.createClient({ proxy: argv["_"][1] })

    var bench = function(urls){
      console.log("Starting benchmark...")
      console.log("Fetching all 100 records 1000 times each...")
      var reqs  = 1000
      var count = 0
      var total = benchcount * reqs

      // for (x = 0; x <= reqs; x++)(function(i){
      //   urls.forEach(function(u){
      //     client.get(u, function(record){
      //       count++
      //       if (count === total){
      //         console.log("done", total, "requests")
      //       }
      //     })  
      //   })
      // })(i)

    
      for (y = 0; y <= benchcount; y++)(function(y){
        for (x = 0; x <= reqs; x++)(function(x){
          client.get("/" + y, function(record){
            count++
            if (count === total){
              console.log("done", total, "requests")
            }
          })
        })(x)
      })(i)

    }


    console.log("Creating", benchcount, "records...")
    var urls = []
    for (i = 0; i < benchcount; i++)(function(i){
      var url = "/" + i
      urls.push(url)
      var value = { abuse: (i % 2 === 0) } // set even records to true
      client.set(url, value, function(){
        setcount++
        if (setcount === benchcount) bench(urls)
      })
    })(i)




  } else {
    console.log("Domain to benchmark required")
    console.log("Example: `urlinfo benchmark localhost:9000`")
    process.exit()
  }
}
